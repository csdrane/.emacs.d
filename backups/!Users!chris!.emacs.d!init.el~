(global-hl-line-mode 1)
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
(setq tramp-default-method "ssh")
(setq dired-auto-revert-buffer t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#657b83"])
 '(background-color "#002b36")
 '(background-mode dark)
 '(company-idle-delay 0)
 '(company-minimum-prefix-length 2)
 '(cursor-color "#839496")
 '(custom-safe-themes
   (quote
    ("6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "c5a044ba03d43a725bd79700087dea813abcb6beb6be08c7eb3303ed90782482" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "acb039d6f2c41b3bd852b448351b2979f44ef488026c95dd5228d2f6da57f574" "1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "e16a771a13a202ee6e276d06098bc77f008b73bbac4d526f160faa2d76c1dd0e" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(erc-autojoin-channels-alist (quote (("freenode.net"))))
 '(erc-nick "csd_")
 '(foreground-color "#839496")
 '(graphviz-dot-indent-width 2)
 '(haskell-mode-hook (quote (turn-on-haskell-indentation)))
 '(ido-max-prospects 6)
 '(iswitchb-mode nil)
 '(org-completion-use-ido t)
 '(org-drill-optimal-factor-matrix (quote ((1 (2.6 . 4.14)))))
 '(org-habit-graph-column 80)
 '(org-modules
   (quote
    (org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-drill org-table org-w3m)))
 '(org-outline-path-complete-in-steps nil)
 '(reb-re-syntax (quote string))
 '(send-mail-function (quote sendmail-send-it))
 '(server-mode t)
 '(visible-bell t)
 '(winner-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cider-stacktrace-face ((t (:inherit default :background "black" :foreground "white")))))

(setq-default indent-tabs-mode nil)
;; C-n adds newline
(setq next-line-add-newlines t)

(if (string-equal system-type "darwin")
    (progn
      (menu-bar-mode -1) 
      (toggle-scroll-bar -1) 
      (tool-bar-mode -1)
      (add-to-list 'exec-path "/usr/local/bin")
      (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH"))))) 

(require 'use-package)
(setq use-package-verbose t)

;; (use-package smart-mode-line
;;   :init
;;   (progn
;;     (sml/setup)
;;     (sml/apply-theme 'respectful)
;;     (setq-default
;;      mode-line-format
;;      '("%e"
;;        mode-line-front-space
;;        mode-line-mule-info
;;        mode-line-client
;;        mode-line-modified
;;        mode-line-remote
;;        mode-line-frame-identification
;;        mode-line-buffer-identification
;;        "   "
;;        mode-line-position
;;        (vc-mode vc-mode)
;;        "  "
;;        mode-line-modes
;;        mode-line-misc-info
;;        mode-line-end-spaces))))

(use-package haskell
  :init
  (progn
    (autoload 'ghc-init "ghc" nil t)
    (autoload 'ghc-debug "ghc" nil t)
    (add-hook 'haskell-mode-hook (lambda () (ghc-init)))))

(use-package smex
  :bind
  ("M-x" . smex))

(use-package ido
  :bind ("M-i" . ido-goto-symbol)
  :init
  (progn
    (ido-mode t)
    (ido-ubiquitous-mode t)
    (setq ido-everywhere t)
    (setq ido-buffer-disable-smart-matches nil)
    (setq ido-enable-flex-matching t)
    (setq ido-use-filename-at-point 'guess)
    (setq ido-use-url-at-point t)
    (setq ido-create-new-buffer 'always)))

(use-package ido-ubiquitous)
(use-package projectile)

(bind-key (kbd "C-x C-b") 'ibuffer)
(bind-key (kbd "C-x C-d") 'dired)
(autoload 'ibuffer "ibuffer" "List buffers." t)

(use-package yasnippet
  :init
  (progn
    (yas-global-mode 1)
    (setq yas-snippet-dirs
          '("~/.emacs.d/yasnippet-snippets/"
            "~/emacs-dev/yasnippets/"))))

(use-package flycheck)

(defun chris/paredit-nonlisp ()
  "Turn on paredit mode for non-lisps."
  (interactive)
  (set (make-local-variable 'paredit-space-for-delimiter-predicates)
       '((lambda (endp delimiter) nil)))
  (paredit-mode 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Hacks courtesy of http://pages.sachachua.com/.emacs.d/Sacha.html
;; 

;; Don't care for this mode. Maybe try increasing time before help window pops up?
;; C-x page takes up half the screen.
;; (use-package guide-key
;;   :init
;;   (setq guide-key/guide-key-sequence '("C-x" "C-x r" "C-x 4" "C-c"))
;;   (guide-key-mode 1))  ; Enable guide-key-mode

;; Pop to mark
;; Handy way of getting back to previous places.

(fset 'yes-or-no-p 'y-or-n-p)
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq vc-make-backup-files t)
(setq sentence-end-double-space nil)


;; Windmove lets you move between windows with something more natural than cycling through C-x o (other-window). Windmove doesn't behave well with Org, so we need to use different keybindings.
(use-package windmove
  :bind
  (("<f2> <right>" . windmove-right)
   ("<f2> <left>" . windmove-left)
   ("<f2> <up>" . windmove-up)
   ("<f2> <down>" . windmove-down)))

(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

;; Note about below: would want to replace C-k binding with kill-region.
;; Choosing not to install below in order to preserve paredit kill line hack below.
;; (defadvice kill-region (before slick-cut activate compile)
;;   "When called interactively with no active region, kill a single line instead."
;;   (interactive
;;     (if mark-active (list (region-beginning) (region-end))
;;       (list (line-beginning-position)
;;         (line-beginning-position 2)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Fix Shift-Up bug with iTerm2
;; Solution per  https://groups.google.com/forum/#!topic/gnu.emacs.help/rR478H4BDU8

(if (tty-type)
    (progn
      (define-key input-decode-map "\e[1;2A" [S-up])
      (if (equal "xterm" (tty-type))
          (define-key input-decode-map "\e[1;2A" [S-up]))
      (defadvice terminal-init-xterm (after select-shift-up activate)
        (define-key input-decode-map "\e[1;2A" [S-up]))
      ;; iTerm2 key configs
      (define-key input-decode-map "\e[1;10A" [M-S-up])
      (define-key input-decode-map "\e[1;10B" [M-S-down])
      (define-key input-decode-map "\e[1;10C" [M-S-right])
      (define-key input-decode-map "\e[1;10D" [M-S-left])
      (define-key input-decode-map "\e[1;13Q" [M-S-return])
      (define-key input-decode-map "\e[1;9A" [M-up])
      (define-key input-decode-map "\e[1;9B" [M-down])
      (define-key input-decode-map "\e[1;9C" [M-right])
      (define-key input-decode-map "\e[1;9D" [M-left])
      (define-key input-decode-map "\e[1;12C" [M-C-right])
      (define-key input-decode-map "\e[1;12D" [M-C-left]))

  (use-package magit
    :init
    (setq magit-diff-options '("-b")))) ; ignore whitespace
;; Enable CIDER auto-completion

;; Install ElDoc
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
;; Integrate with CIDER / Clojure
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

(use-package paredit
  :init
  (progn
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)))

;; (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
;; (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
;; (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;; (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
;; (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
;; (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
;; (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
;; To use ParEdit with ElDoc, you should make ElDoc aware of ParEditâ€™s most used commands:
(require 'eldoc) ; if not already loaded
(eldoc-add-command
 'paredit-backward-delete
 'paredit-close-round)
;; ParEdit in REPL sessions 

;; Stop SLIME's REPL from grabbing DEL,
;; which is annoying when backspacing over a '('
(defun override-slime-repl-bindings-with-paredit ()
  (define-key slime-repl-mode-map
    (read-kbd-macro paredit-backward-delete-key)
    nil))

;; Show Paren Mode
;; When point is on one of the paired characters, the other is highlighted. 
;; http://www.emacswiki.org/emacs/ShowParenMode
(show-paren-mode 1)

;; Install Rainbow Delimiters
(use-package rainbow-delimiters
  :init
  (progn
    (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'python-mode-hook 'rainbow-delimiters-mode)))

(use-package undo-tree
  :defer t
  :ensure t
  :diminish undo-tree-mode
  :idle
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

;; Install Solarized
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/emacs-color-theme-solarized")
(load-theme 'solarized-light t)
(set-face-background 'secondary-selection "yellow")

(use-package company
  :ensure t
  :config
  (add-hook 'clojure-mode-hook 'company-mode)
  (add-hook 'cider-repl-mode-hook 'company-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode))

(use-package clojure-mode
  :init
  (progn
 ;   (add-hook 'clojure-mode-hook 'show-paren-mode)
    ;; Better indentation for Compojure macros
    ;; https://github.com/weavejester/compojure/wiki/Emacs-indentation 
    (define-clojure-indent
      (defroutes 'defun)
      (GET 2)
      (POST 2)
      (PUT 2)
      (DELETE 2)
      (HEAD 2)
      (ANY 2)
      (context 2))))

;;
;; Org Mode
;;

;; Suggested Org Mode global keybindings
;; https://www.gnu.org/software/emacs/manual/html_node/org/Activation.html#Activation
(bind-key "\C-cl" 'org-store-link)
(bind-key "\C-cc" 'org-capture)
(bind-key "\C-ca" 'org-agenda)
(bind-key "\C-cb" 'org-iswitchb)
;; Local keybindings
(eval-after-load 'org-mode
  '(progn
     '(define-key org-mode-map "\C-c[" 'org-agenda-file-to-front)
     '(define-key org-mode-map "\C-c]" 'org-remove-file)))

(setq org-return-follows-link t)
(setq org-catch-invisible-edits 'smart)
(setq org-startup-indented t)
(setq org-global-properties
      '(("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00")))
;; Clocking
(setq org-log-done 'time)
(setq org-log-into-drawer "LOGBOOK")
(setq org-clock-into-drawer 1)
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-report-include-clocking-task t)
;; Track TODO state changes
;; https://www.gnu.org/software/emacs/manual/html_node/org/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")
	(sequence "PROJ(p!)")))
(setq org-todo-keyword-faces
      '(("PROJ" . (:foreground "green" :weight bold))
        ("DONE" . (:foreground "cyan" :weight bold))
        ("WAIT" . (:foreground "red" :weight bold))))

(setq org-tag-alist '(("@work" . ?b) 
                      ("@home" . ?h) 
                      ("@writing" . ?w)
                      ("@errands" . ?e) 
		      ("@coding" . ?c)
                      ("@phone" . ?p)
                      ("@reading" . ?r)
                      ("@computer" . ?l)
                      ("quantified" . ?q)
                      ("lowenergy" . ?0)
                      ("highenergy" . ?1)))

;; Org-refile
(setq org-refile-targets '((nil :maxlevel . 2)
			   (org-agenda-files :maxlevel . 2)))
;; Org-capture
(setq org-directory "~/Documents/Personal/GTD")
(setq org-agenda-files '("~/Documents/Personal/GTD/GTD Review.org" "~/Documents/Personal/GTD/journal.org"))
(setq org-default-capture-file (concat org-directory "/capture-notes.org"))

(defvar chris/org-task-template "* TODO %^{Task}    
SCHEDULED: %^t
%?
:PROPERTIES:
:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
:END:" "Basic task data")

(defvar chris/org-someday-template "* SOMEDAY %^{Someday}    
%?
:END:" "Basic Someday/Maybe data")
(setq org-capture-templates
      `(("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
	 "* %?\nEntered on %U\n  %i\n  %a")  
	("n" "Note" entry (file+headline (concat org-directory "/GTD Review.org") "Notes")
	 "")
	("s" "Someday" entry (file+headline (concat org-directory "/GTD Review.org") "Inbox, Someday/Myabe") 
	 ,chris/org-someday-template)
	("t" "Task" entry (file+headline (concat org-directory "/GTD Review.org") "Inbox, Tasks") 
	 ,chris/org-task-template)))

;;
;; Misc. hacks
;;

;; Renames current buffer and file it is visiting. 
;; http://whattheemacsd.com/
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
(bind-key (kbd "C-x C-r") 'rename-current-buffer-file)

;; C-d on an empty line in the shell terminates the process. 
;; With this snippet, another press of C-d will kill the buffer.
;; It's pretty nice, since you then just tap C-d twice to get rid of the shell and go on about your merry way.
;; http://whattheemacsd.com/
(defun comint-delchar-or-eof-or-kill-buffer (arg)
  (interactive "p")
  (if (null (get-buffer-process (current-buffer)))
      (kill-buffer)
    (comint-delchar-or-maybe-eof arg)))

(add-hook 'shell-mode-hook
          (lambda ()
            (define-key shell-mode-map
              (kbd "C-d") 'comint-delchar-or-eof-or-kill-buffer)))

;; Toggle between horizontal and vertical layout of two windows.
;; http://whattheemacsd.com/
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

;; Making paredit work with delete-selection-mode
;; C-w on highlighted region will no longer delete only
;; one side of the parentheses.
;; http://whattheemacsd.com/
(put 'paredit-forward-delete 'delete-selection 'supersede)
(put 'paredit-backward-delete 'delete-selection 'supersede)
(put 'paredit-open-round 'delete-selection t)
(put 'paredit-open-square 'delete-selection t)
(put 'paredit-doublequote 'delete-selection t)
(put 'paredit-newline 'delete-selection t)

;;  
;; Imenu
;; 

;; http://www.emacswiki.org/emacs/ImenuMode
;; http://www.masteringemacs.org/article/effective-editing-movement
(defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
	      (add-to-list 'name-and-pos (cons name position))))))))


