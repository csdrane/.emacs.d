level6@io:/levels$ objdump -d level06_alt

level06_alt:     file format elf32-i386


Disassembly of section .init:

080483e0 <_init>:
 80483e0:	55                   	push   %ebp
 80483e1:	89 e5                	mov    %esp,%ebp
 80483e3:	53                   	push   %ebx
 80483e4:	83 ec 04             	sub    $0x4,%esp
 80483e7:	e8 00 00 00 00       	call   80483ec <_init+0xc>
 80483ec:	5b                   	pop    %ebx
 80483ed:	81 c3 4c 14 00 00    	add    $0x144c,%ebx
 80483f3:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
 80483f9:	85 d2                	test   %edx,%edx
 80483fb:	74 05                	je     8048402 <_init+0x22>
 80483fd:	e8 1e 00 00 00       	call   8048420 <__gmon_start__@plt>
 8048402:	e8 49 01 00 00       	call   8048550 <frame_dummy>
 8048407:	e8 c4 02 00 00       	call   80486d0 <__do_global_ctors_aux>
 804840c:	58                   	pop    %eax
 804840d:	5b                   	pop    %ebx
 804840e:	c9                   	leave
 804840f:	c3                   	ret

Disassembly of section .plt:

08048410 <__gmon_start__@plt-0x10>:
 8048410:	ff 35 3c 98 04 08    	pushl  0x804983c
 8048416:	ff 25 40 98 04 08    	jmp    *0x8049840
 804841c:	00 00                	add    %al,(%eax)
	...

08048420 <__gmon_start__@plt>:
 8048420:	ff 25 44 98 04 08    	jmp    *0x8049844
 8048426:	68 00 00 00 00       	push   $0x0
 804842b:	e9 e0 ff ff ff       	jmp    8048410 <_init+0x30>

08048430 <fgets@plt>:
 8048430:	ff 25 48 98 04 08    	jmp    *0x8049848
 8048436:	68 08 00 00 00       	push   $0x8
 804843b:	e9 d0 ff ff ff       	jmp    8048410 <_init+0x30>

08048440 <__libc_start_main@plt>:
 8048440:	ff 25 4c 98 04 08    	jmp    *0x804984c
 8048446:	68 10 00 00 00       	push   $0x10
 804844b:	e9 c0 ff ff ff       	jmp    8048410 <_init+0x30>

08048450 <execl@plt>:
 8048450:	ff 25 50 98 04 08    	jmp    *0x8049850
 8048456:	68 18 00 00 00       	push   $0x18
 804845b:	e9 b0 ff ff ff       	jmp    8048410 <_init+0x30>

08048460 <fopen@plt>:
 8048460:	ff 25 54 98 04 08    	jmp    *0x8049854
 8048466:	68 20 00 00 00       	push   $0x20
 804846b:	e9 a0 ff ff ff       	jmp    8048410 <_init+0x30>

08048470 <__stack_chk_fail@plt>:
 8048470:	ff 25 58 98 04 08    	jmp    *0x8049858
 8048476:	68 28 00 00 00       	push   $0x28
 804847b:	e9 90 ff ff ff       	jmp    8048410 <_init+0x30>

08048480 <setreuid@plt>:
 8048480:	ff 25 5c 98 04 08    	jmp    *0x804985c
 8048486:	68 30 00 00 00       	push   $0x30
 804848b:	e9 80 ff ff ff       	jmp    8048410 <_init+0x30>

08048490 <puts@plt>:
 8048490:	ff 25 60 98 04 08    	jmp    *0x8049860
 8048496:	68 38 00 00 00       	push   $0x38
 804849b:	e9 70 ff ff ff       	jmp    8048410 <_init+0x30>

080484a0 <strcmp@plt>:
 80484a0:	ff 25 64 98 04 08    	jmp    *0x8049864
 80484a6:	68 40 00 00 00       	push   $0x40
 80484ab:	e9 60 ff ff ff       	jmp    8048410 <_init+0x30>

080484b0 <geteuid@plt>:
 80484b0:	ff 25 68 98 04 08    	jmp    *0x8049868
 80484b6:	68 48 00 00 00       	push   $0x48
 80484bb:	e9 50 ff ff ff       	jmp    8048410 <_init+0x30>

Disassembly of section .text:

080484c0 <_start>:
 80484c0:	31 ed                	xor    %ebp,%ebp
 80484c2:	5e                   	pop    %esi
 80484c3:	89 e1                	mov    %esp,%ecx
 80484c5:	83 e4 f0             	and    $0xfffffff0,%esp
 80484c8:	50                   	push   %eax
 80484c9:	54                   	push   %esp
 80484ca:	52                   	push   %edx
 80484cb:	68 60 86 04 08       	push   $0x8048660
 80484d0:	68 70 86 04 08       	push   $0x8048670
 80484d5:	51                   	push   %ecx
 80484d6:	56                   	push   %esi
 80484d7:	68 74 85 04 08       	push   $0x8048574
 80484dc:	e8 5f ff ff ff       	call   8048440 <__libc_start_main@plt>
 80484e1:	f4                   	hlt
 80484e2:	90                   	nop
 80484e3:	90                   	nop
 80484e4:	90                   	nop
 80484e5:	90                   	nop
 80484e6:	90                   	nop
 80484e7:	90                   	nop
 80484e8:	90                   	nop
 80484e9:	90                   	nop
 80484ea:	90                   	nop
 80484eb:	90                   	nop
 80484ec:	90                   	nop
 80484ed:	90                   	nop
 80484ee:	90                   	nop
 80484ef:	90                   	nop

080484f0 <__do_global_dtors_aux>:
 80484f0:	55                   	push   %ebp
 80484f1:	89 e5                	mov    %esp,%ebp
 80484f3:	53                   	push   %ebx
 80484f4:	83 ec 04             	sub    $0x4,%esp
 80484f7:	80 3d 84 98 04 08 00 	cmpb   $0x0,0x8049884
 80484fe:	75 40                	jne    8048540 <__do_global_dtors_aux+0x50>
 8048500:	8b 15 88 98 04 08    	mov    0x8049888,%edx
 8048506:	b8 5c 97 04 08       	mov    $0x804975c,%eax
 804850b:	2d 58 97 04 08       	sub    $0x8049758,%eax
 8048510:	c1 f8 02             	sar    $0x2,%eax
 8048513:	8d 58 ff             	lea    -0x1(%eax),%ebx
 8048516:	39 da                	cmp    %ebx,%edx
 8048518:	73 1f                	jae    8048539 <__do_global_dtors_aux+0x49>
 804851a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048520:	8d 42 01             	lea    0x1(%edx),%eax
 8048523:	a3 88 98 04 08       	mov    %eax,0x8049888
 8048528:	ff 14 85 58 97 04 08 	call   *0x8049758(,%eax,4)
 804852f:	8b 15 88 98 04 08    	mov    0x8049888,%edx
 8048535:	39 da                	cmp    %ebx,%edx
 8048537:	72 e7                	jb     8048520 <__do_global_dtors_aux+0x30>
 8048539:	c6 05 84 98 04 08 01 	movb   $0x1,0x8049884
 8048540:	83 c4 04             	add    $0x4,%esp
 8048543:	5b                   	pop    %ebx
 8048544:	5d                   	pop    %ebp
 8048545:	c3                   	ret
 8048546:	8d 76 00             	lea    0x0(%esi),%esi
 8048549:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048550 <frame_dummy>:
 8048550:	55                   	push   %ebp
 8048551:	89 e5                	mov    %esp,%ebp
 8048553:	83 ec 08             	sub    $0x8,%esp
 8048556:	a1 60 97 04 08       	mov    0x8049760,%eax
 804855b:	85 c0                	test   %eax,%eax
 804855d:	74 12                	je     8048571 <frame_dummy+0x21>
 804855f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048564:	85 c0                	test   %eax,%eax
 8048566:	74 09                	je     8048571 <frame_dummy+0x21>
 8048568:	c7 04 24 60 97 04 08 	movl   $0x8049760,(%esp)
 804856f:	ff d0                	call   *%eax
 8048571:	c9                   	leave
 8048572:	c3                   	ret
 8048573:	90                   	nop

08048574 <main>:
 8048574:	8d 4c 24 04          	lea    0x4(%esp),%ecx    ; load main() return address to ecx
 8048578:	83 e4 f0             	and    $0xfffffff0,%esp  ; align stack
 804857b:	ff 71 fc             	pushl  -0x4(%ecx)        ; push fn return address
 804857e:	55                   	push   %ebp
 804857f:	89 e5                	mov    %esp,%ebp
 8048581:	53                   	push   %ebx
 8048582:	51                   	push   %ecx
 8048583:	83 ec 40             	sub    $0x40,%esp        
 8048586:	8b 41 04             	mov    0x4(%ecx),%eax    ; make stack frame
 8048589:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 804858c:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048592:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048595:	31 c0                	xor    %eax,%eax
 8048597:	c7 44 24 04 20 87 04 	movl   $0x8048720,0x4(%esp)
 804859e:	08
 804859f:	c7 04 24 22 87 04 08 	movl   $0x8048722,(%esp)
 80485a6:	e8 b5 fe ff ff       	call   8048460 <fopen@plt>
 80485ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
 80485ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
 80485b1:	89 44 24 08          	mov    %eax,0x8(%esp)
 80485b5:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
 80485bc:	00
 80485bd:	c7 04 24 a0 98 04 08 	movl   $0x80498a0,(%esp)
 80485c4:	e8 67 fe ff ff       	call   8048430 <fgets@plt>
 80485c9:	a1 80 98 04 08       	mov    0x8049880,%eax
 80485ce:	89 44 24 08          	mov    %eax,0x8(%esp)
 80485d2:	c7 44 24 04 e7 03 00 	movl   $0x3e7,0x4(%esp)
 80485d9:	00
 80485da:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 80485dd:	89 04 24             	mov    %eax,(%esp)
 80485e0:	e8 4b fe ff ff       	call   8048430 <fgets@plt>
 80485e5:	c7 44 24 04 a0 98 04 	movl   $0x80498a0,0x4(%esp)
 80485ec:	08
 80485ed:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 80485f0:	89 04 24             	mov    %eax,(%esp)
 80485f3:	e8 a8 fe ff ff       	call   80484a0 <strcmp@plt>
 80485f8:	85 c0                	test   %eax,%eax
 80485fa:	75 40                	jne    804863c <main+0xc8> ----------------------
 80485fc:	c7 04 24 3b 87 04 08 	movl   $0x804873b,(%esp)                        |
 8048603:	e8 88 fe ff ff       	call   8048490 <puts@plt>                       |
 8048608:	e8 a3 fe ff ff       	call   80484b0 <geteuid@plt>                    |
 804860d:	89 c3                	mov    %eax,%ebx                                |
 804860f:	e8 9c fe ff ff       	call   80484b0 <geteuid@plt>                    |
 8048614:	89 5c 24 04          	mov    %ebx,0x4(%esp)                           |
 8048618:	89 04 24             	mov    %eax,(%esp)                              |
 804861b:	e8 60 fe ff ff       	call   8048480 <setreuid@plt>                   |
 8048620:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)                           |
 8048627:	00                                                                      |
 8048628:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)                           |
 804862f:	00                                                                      |
 8048630:	c7 04 24 44 87 04 08 	movl   $0x8048744,(%esp)                        |
 8048637:	e8 14 fe ff ff       	call   8048450 <execl@plt>                      |
 804863c:	b8 00 00 00 00       	mov    $0x0,%eax   ------------------------------
 8048641:	8b 55 f4             	mov    -0xc(%ebp),%edx
 8048644:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx       ; check if canary = expectation
 804864b:	74 05                	je     8048652 <main+0xde> ; if so,------
 804864d:	e8 1e fe ff ff       	call   8048470 <__stack_chk_fail@plt>   | ; else, stack smashing detected
 8048652:	83 c4 40             	add    $0x40,%esp    --------------------
 8048655:	59                   	pop    %ecx
 8048656:	5b                   	pop    %ebx
 8048657:	5d                   	pop    %ebp
 8048658:	8d 61 fc             	lea    -0x4(%ecx),%esp
 804865b:	c3                   	ret
 804865c:	90                   	nop
 804865d:	90                   	nop
 804865e:	90                   	nop
 804865f:	90                   	nop

08048660 <__libc_csu_fini>:
 8048660:	55                   	push   %ebp
 8048661:	89 e5                	mov    %esp,%ebp
 8048663:	5d                   	pop    %ebp
 8048664:	c3                   	ret
 8048665:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048669:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048670 <__libc_csu_init>:
 8048670:	55                   	push   %ebp
 8048671:	89 e5                	mov    %esp,%ebp
 8048673:	57                   	push   %edi
 8048674:	56                   	push   %esi
 8048675:	53                   	push   %ebx
 8048676:	e8 4f 00 00 00       	call   80486ca <__i686.get_pc_thunk.bx>
 804867b:	81 c3 bd 11 00 00    	add    $0x11bd,%ebx
 8048681:	83 ec 0c             	sub    $0xc,%esp
 8048684:	e8 57 fd ff ff       	call   80483e0 <_init>
 8048689:	8d bb 18 ff ff ff    	lea    -0xe8(%ebx),%edi
 804868f:	8d 83 18 ff ff ff    	lea    -0xe8(%ebx),%eax
 8048695:	29 c7                	sub    %eax,%edi
 8048697:	c1 ff 02             	sar    $0x2,%edi
 804869a:	85 ff                	test   %edi,%edi
 804869c:	74 24                	je     80486c2 <__libc_csu_init+0x52>
 804869e:	31 f6                	xor    %esi,%esi
 80486a0:	8b 45 10             	mov    0x10(%ebp),%eax
 80486a3:	89 44 24 08          	mov    %eax,0x8(%esp)
 80486a7:	8b 45 0c             	mov    0xc(%ebp),%eax
 80486aa:	89 44 24 04          	mov    %eax,0x4(%esp)
 80486ae:	8b 45 08             	mov    0x8(%ebp),%eax
 80486b1:	89 04 24             	mov    %eax,(%esp)
 80486b4:	ff 94 b3 18 ff ff ff 	call   *-0xe8(%ebx,%esi,4)
 80486bb:	83 c6 01             	add    $0x1,%esi
 80486be:	39 fe                	cmp    %edi,%esi
 80486c0:	72 de                	jb     80486a0 <__libc_csu_init+0x30>
 80486c2:	83 c4 0c             	add    $0xc,%esp
 80486c5:	5b                   	pop    %ebx
 80486c6:	5e                   	pop    %esi
 80486c7:	5f                   	pop    %edi
 80486c8:	5d                   	pop    %ebp
 80486c9:	c3                   	ret

080486ca <__i686.get_pc_thunk.bx>:
 80486ca:	8b 1c 24             	mov    (%esp),%ebx
 80486cd:	c3                   	ret
 80486ce:	90                   	nop
 80486cf:	90                   	nop

080486d0 <__do_global_ctors_aux>:
 80486d0:	55                   	push   %ebp
 80486d1:	89 e5                	mov    %esp,%ebp
 80486d3:	53                   	push   %ebx
 80486d4:	83 ec 04             	sub    $0x4,%esp
 80486d7:	a1 50 97 04 08       	mov    0x8049750,%eax
 80486dc:	83 f8 ff             	cmp    $0xffffffff,%eax
 80486df:	74 13                	je     80486f4 <__do_global_ctors_aux+0x24>
 80486e1:	bb 50 97 04 08       	mov    $0x8049750,%ebx
 80486e6:	66 90                	xchg   %ax,%ax
 80486e8:	83 eb 04             	sub    $0x4,%ebx
 80486eb:	ff d0                	call   *%eax
 80486ed:	8b 03                	mov    (%ebx),%eax
 80486ef:	83 f8 ff             	cmp    $0xffffffff,%eax
 80486f2:	75 f4                	jne    80486e8 <__do_global_ctors_aux+0x18>
 80486f4:	83 c4 04             	add    $0x4,%esp
 80486f7:	5b                   	pop    %ebx
 80486f8:	5d                   	pop    %ebp
 80486f9:	c3                   	ret
 80486fa:	90                   	nop
 80486fb:	90                   	nop

Disassembly of section .fini:

080486fc <_fini>:
 80486fc:	55                   	push   %ebp
 80486fd:	89 e5                	mov    %esp,%ebp
 80486ff:	53                   	push   %ebx
 8048700:	83 ec 04             	sub    $0x4,%esp
 8048703:	e8 00 00 00 00       	call   8048708 <_fini+0xc>
 8048708:	5b                   	pop    %ebx
 8048709:	81 c3 30 11 00 00    	add    $0x1130,%ebx
 804870f:	e8 dc fd ff ff       	call   80484f0 <__do_global_dtors_aux>
 8048714:	59                   	pop    %ecx
 8048715:	5b                   	pop    %ebx
 8048716:	c9                   	leave
 8048717:	c3                   	ret